#!/bin/bash
# COLOR VALIDATION
clear
y='\033[1;33m' #yellow
BGX="\033[42m"
CYAN="\033[96m"
z="\033[96m"
f="\033[1;97;41m"
RED='\033[0;31m'
NC='\033[0m'
gray="\e[1;30m"
Blue="\033[0;34m"
green='\033[0;32m'
grenbo="\e[92;1m"
purple="\033[1;95m"
YELL='\033[0;33m'
ISP=$(cat /root/.info/.isp)
CITY=$(cat /root/.info/.city)
IPVPS=$(curl -s ipv4.icanhazip.com)
NS=$(cat /etc/xray/dns)
domain=$(cat /etc/xray/domain)
RAM=$(free -m | awk 'NR==2 {print $2}')
USAGERAM=$(free -m | awk 'NR==2 {print $3}')
MEMOFREE=$(printf '%-1s' "$(free -m | awk 'NR==2{printf "%.2f%%", $3*100/$2 }')")
LOADCPU=$(printf '%-0.00001s' "$(top -bn1 | awk '/Cpu/ { cpu = "" 100 - $8 "%" }; END { print cpu }')")
MODEL=$(cat /etc/os-release | grep -w PRETTY_NAME | head -n1 | sed 's/=//g' | sed 's/"//g' | sed 's/PRETTY_NAME//g')
CORE=$(printf '%-1s' "$(grep -c cpu[0-9] /proc/stat)")
DATEVPS=$(date +'%d-%m-%Y')
TIMEZONE=$(printf '%(%H-%M-%S)T')
SERONLINE=$(uptime -p | cut -d " " -f 2-10000)
clear
MYIP=$(curl -sS ipv4.icanhazip.com)
clear

# OS Uptime
uptime="$(uptime -p | cut -d " " -f 2-10)"

# Getting CPU Information
cpu_usage1="$(ps aux | awk 'BEGIN {sum=0} {sum+=$3}; END {print sum}')"
cpu_usage="$((${cpu_usage1/\.*} / ${coREDiilik:-1}))"
cpu_usage+=" %"

WKT=$(curl -s ipinfo.io/timezone )
DAY=$(date +%A)
DATE=$(date +%m/%d/%Y)
DATE2=$(date -R | cut -d " " -f -5)
IPVPS=$(curl -s ipv4.icanhazip.com)
cname=$( awk -F: '/model name/ {name=$2} END {print name}' /proc/cpuinfo )
cores=$( awk -F: '/model name/ {core++} END {print core}' /proc/cpuinfo )
freq=$( awk -F: ' /cpu MHz/ {freq=$2} END {print freq}' /proc/cpuinfo )
tram=$( free -m | awk 'NR==2 {print $2}' )
uram=$( free -m | awk 'NR==2 {print $3}' )
fram=$( free -m | awk 'NR==2 {print $4}' )
clear
ssh_service=$(/etc/init.d/ssh status | grep Active | awk '{print $3}' | cut -d "(" -f2 | cut -d ")" -f1)
dropbear_service=$(/etc/init.d/dropbear status | grep Active | awk '{print $3}' | cut -d "(" -f2 | cut -d ")" -f1)
haproxy_service=$(systemctl status haproxy | grep Active | awk '{print $3}' | cut -d "(" -f2 | cut -d ")" -f1)
xray_service=$(systemctl status xray | grep Active | awk '{print $3}' | cut -d "(" -f2 | cut -d ")" -f1)
nginx_service=$(systemctl status nginx | grep Active | awk '{print $3}' | cut -d "(" -f2 | cut -d ")" -f1)
#Status | Geo Project
clear

#####INFOAKUN
vlx=$(grep -c -E "^#& " "/etc/xray/config.json")
let vla=$vlx/2
vmc=$(grep -c -E "^### " "/etc/xray/config.json")
let vma=$vmc/2
ssh1="$(awk -F: '$3 >= 1000 && $1 != "nobody" {print $1}' /etc/passwd | wc -l)"
trx=$(grep -c -E "^#! " "/etc/xray/config.json")
let trb=$trx/2
ssx=$(grep -c -E "^#ss# " "/etc/xray/config.json")
let ssa=$ssx/2
###########
KANAN="\033[1;32m<\033[1;33m<\033[1;31m<\033[1;31m$NC"
KIRI="\033[1;32m>\033[1;33m>\033[1;31m>\033[1;31m$NC"
########
r="\033[1;31m"  #REDTERANG
a=" ${CYAN}ACCOUNT PREMIUM" 
#clear
clear
# ---- Centered banner helper (unchanged) ----
print_center_box_custom() {
  local text="$1"
  local width=46  # inner width for this smaller box
  local text_length=${#text}

  # Expand if text is longer
  if (( text_length > width )); then
    width=$text_length
  fi

  local pad_left=$(( (width - text_length) / 2 ))
  local pad_right=$(( width - text_length - pad_left ))

  local spaces_left=$(printf '%*s' "$pad_left")
  local spaces_right=$(printf '%*s' "$pad_right")
  local line="══════════════════════════════════════════════════"

  echo -e " ${z}╭${line}╮${NC}"
  echo -e " ${z}│$NC${CYAN}${spaces_left}${text}${spaces_right}$NC${z}$NC"
  echo -e " ${z}╰${line}╯${NC}"
}

echo -e " "

# ---- Welcome banner ----
print_center_box_custom "EissamiXR — Tunneling Management Dashboard"
echo -e " ${CYAN}╭══════════════════════════════════════════════════╮${NC}"
echo -e "   ${z}$NC [${f}01${NC}]$grenbo Trial Accounts$NC"
echo -e "   ${z}$NC [${f}02${NC}]$grenbo Delete Expired Users$NC" 
echo -e "   ${z}$NC [${f}03${NC}]$grenbo Auto Reboot$NC" 
echo -e "   ${z}$NC [${f}04${NC}]$grenbo Restart Services$NC"
echo -e "   ${z}$NC [${f}05${NC}]$grenbo Change Banner$NC"
echo -e "   ${z}$NC [${f}06${NC}]$grenbo Port Information$NC"
echo -e "   ${z}$NC [${f}07${NC}]$grenbo Renew Domain$NC"
echo -e "   ${z}$NC [${f}08${NC}]$grenbo Running Services$NC"
echo -e "   ${z}$NC [${f}09${NC}]$grenbo Fix SSL Certificate$NC"
echo -e "   ${z}$NC [${f}10${NC}]$grenbo Install UDPCustom$NC"
echo -e " ${CYAN}╰══════════════════════════════════════════════════╯${NC}"
echo -e ""
read -p " Please Type An Option [1–10], [x] To Go Back, Or [0] To Exit ➤ : " opt
echo -e ""
case $opt in
1 | 01)
clear
m-trial
;;
2 | 02)
clear
xp
echo ""
echo -e "[INFO] Returning To Main Menu In 1 Second..." | lolcat
sleep 1
menu-x
;;
3 | 03)
clear
autoreboot
;;
4 | 04)
clear
restart
reboot
;;
5 | 05)
clear
echo -e "[INFO] Preparing to Edit SSH Banner Message..." | lolcat
sleep 2
echo -e "[INFO] Loading Editor, Please Wait... ⏳" | lolcat
sleep 5
nano /etc/kyt.txt
clear
#ask user to restart or back to menu
read -p "Do You Want To Restart The SSH Service to Apply The New Banner? [Y/N] " choice
if [[ "$choice" == [Yy] ]]; then
  echo -e "[INFO] Restarting SSH Service..." | lolcat
  sleep 2
  restart
  reboot
elif [[ "$choice" == [Nn] ]]; then
  echo -e "[INFO] Returning To Main Menu..." | lolcat
  sleep 2
  clear
  menu
else
  echo -e "[✘] Invalid Input. Please Re-edit The Banner And Type Y To Restart SSH Service or N To Back To Menu" | lolcat
  sleep 7
  clear
  menu-x
fi
;;
6 | 06)
clear
prot
;;
7 | 07)
clear
addhost
;;
8 | 08)
clear
run
;;
9 | 09)
clear
fixcert
;;
10)
clear
echo -e "[INFO] Installing UDP-Custom..." | lolcat
sleep 2
wget -q https://raw.githubusercontent.com/Krimo44e/SDK/refs/heads/main/udp-custom/udp-custom-reinstall.sh && chmod +x udp-custom-reinstall.sh && ./udp-custom-reinstall.sh
echo -e "[✔] UDP-Custom installation completed successfully" | lolcat
echo -e "[INFO] Returning To Previous Menu In 2 Seconds..." | lolcat
sleep 2
clear
menu-x
;;
0 | 00)
exit
;;
x)
menu
;;
*)
echo -e "${RED}[✘] Invalid Input. Please Enter A Number Between [1–10], [x] To Go Back, Or [0] To Exit${NC}";
sleep 4
clear
menu-x
;;
esac
clear
