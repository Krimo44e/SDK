#!/bin/bash
# COLOR VALIDATION
clear
y='\033[1;33m' # yellow
BGX="\033[42m"
CYAN="\033[96m"
z="\033[96m"
f="\033[1;97;41m"
RED='\033[0;31m'
NC='\033[0m'
gray="\e[1;30m"
Blue="\033[0;34m"
green='\033[0;32m'
grenbo="\e[92;1m"
purple="\033[1;95m"
YELL='\033[0;33m'
ISP=$(cat /root/.info/.isp)
CITY=$(cat /root/.info/.city)
IPVPS=$(curl -s ipv4.icanhazip.com)
NS=$(cat /etc/xray/dns)
domain=$(cat /etc/xray/domain)
RAM=$(free -m | awk 'NR==2 {print $2}')
USAGERAM=$(free -m | awk 'NR==2 {print $3}')
MEMOFREE=$(printf '%-1s' "$(free -m | awk 'NR==2{printf "%.2f%%", $3*100/$2 }')")
LOADCPU=$(printf '%-0.00001s' "$(top -bn1 | awk '/Cpu/ { cpu = "" 100 - $8 "%" }; END { print cpu }')")
MODEL=$(cat /etc/os-release | grep -w PRETTY_NAME | head -n1 | sed 's/=//g' | sed 's/"//g' | sed 's/PRETTY_NAME//g')
CORE=$(printf '%-1s' "$(grep -c cpu[0-9] /proc/stat)")
DATEVPS=$(date +'%d-%m-%Y')
TIMEZONE=$(printf '%(%H-%M-%S)T')
SERONLINE=$(uptime -p | cut -d " " -f 2-10000)
clear
MYIP=$(curl -sS ipv4.icanhazip.com)
clear

# OS Uptime
uptime="$(uptime -p | cut -d " " -f 2-10)"

# Getting CPU Information
cpu_usage1="$(ps aux | awk 'BEGIN {sum=0} {sum+=$3}; END {print sum}')"
cpu_usage="$((${cpu_usage1/\.*} / ${coREDiilik:-1}))"
cpu_usage+=" %"

WKT=$(curl -s ipinfo.io/timezone )
DAY=$(date +%A)
DATE=$(date +%m/%d/%Y)
DATE2=$(date -R | cut -d " " -f -5)
IPVPS=$(curl -s ipv4.icanhazip.com)
cname=$( awk -F: '/model name/ {name=$2} END {print name}' /proc/cpuinfo )
cores=$( awk -F: '/model name/ {core++} END {print core}' /proc/cpuinfo )
freq=$( awk -F: ' /cpu MHz/ {freq=$2} END {print freq}' /proc/cpuinfo )
tram=$( free -m | awk 'NR==2 {print $2}' )
uram=$( free -m | awk 'NR==2 {print $3}' )
fram=$( free -m | awk 'NR==2 {print $4}' )
clear
ssh_service=$(/etc/init.d/ssh status | grep Active | awk '{print $3}' | cut -d "(" -f2 | cut -d ")" -f1)
dropbear_service=$(/etc/init.d/dropbear status | grep Active | awk '{print $3}' | cut -d "(" -f2 | cut -d ")" -f1)
haproxy_service=$(systemctl status haproxy | grep Active | awk '{print $3}' | cut -d "(" -f2 | cut -d ")" -f1)
xray_service=$(systemctl status xray | grep Active | awk '{print $3}' | cut -d "(" -f2 | cut -d ")" -f1)
nginx_service=$(systemctl status nginx | grep Active | awk '{print $3}' | cut -d "(" -f2 | cut -d ")" -f1)
#Status | Geo Project
clear
# STATUS SERVICE  SSH 
if [[ $ssh_service == "running" ]]; then 
   status_ssh="${green}ON🟢${NC}"
else
   status_ssh="${RED}🔴${NC} "
fi

# // SSH Websocket Proxy
ssh_ws=$( systemctl status ws | grep Active | awk '{print $3}' | sed 's/(//g' | sed 's/)//g' )
if [[ $ssh_ws == "running" ]]; then
    status_ws_epro="${green}ON🟢${NC}"
else
    status_ws_epro="${RED}🔴${NC} "
fi

# STATUS SERVICE HAPROXY
if [[ $haproxy_service == "running" ]]; then 
   status_haproxy="${green}ON🟢${NC}"
else
   status_haproxy="${RED}🔴${NC} "
fi

# STATUS SERVICE XRAY
if [[ $xray_service == "running" ]]; then 
   status_xray="${green}ON🟢${NC}"
else
   status_xray="${RED}🔴${NC} "
fi

# STATUS SERVICE NGINX
if [[ $nginx_service == "running" ]]; then 
   status_nginx="${green}ON🟢${NC}"
else
   status_nginx="${RED}🔴${NC} "
fi

# STATUS SERVICE Dropbear
if [[ $dropbear_service == "running" ]]; then 
   status_dropbear="${green}ON🟢${NC}"
else
   status_dropbear="${RED}🔴${NC} "
fi
#####INFOAKUN
vlx=$(grep -c -E "^#& " "/etc/xray/config.json")
let vla=$vlx/2
vmc=$(grep -c -E "^### " "/etc/xray/config.json")
let vma=$vmc/2
ssh1="$(awk -F: '$3 >= 1000 && $1 != "nobody" {print $1}' /etc/passwd | wc -l)"
trx=$(grep -c -E "^#! " "/etc/xray/config.json")
let trb=$trx/2
ssx=$(grep -c -E "^#ss# " "/etc/xray/config.json")
let ssa=$ssx/2

###########
KANAN="\033[1;32m<\033[1;33m<\033[1;31m<\033[1;31m$NC"
KIRI="\033[1;32m>\033[1;33m>\033[1;31m>\033[1;31m$NC"
########
r="\033[1;31m"  # Bright Red
a=" ${CYAN}PREMIUM ACCOUNT" 
#clear
# ---- Centered banner helper ----
print_center_box() {
  local text="$1"
  local width=58  # inner width between the box edges
  local text_length=${#text}

  # If the text is longer than the default width, expand the box
  if (( text_length > width )); then
    width=$text_length
  fi

  # Compute left/right padding (handles odd lengths)
  local pad_left=$(( (width - text_length) / 2 ))
  local pad_right=$(( width - text_length - pad_left ))

  local spaces_left=$(printf '%*s' "$pad_left")
  local spaces_right=$(printf '%*s' "$pad_right")
  local line="══════════════════════════════════════════════════════════"


  echo -e " ${z}╭${line}╮${NC}"
  echo -e " ${z}│$NC${CYAN}${spaces_left}${text}${spaces_right}$NC${z}│$NC"
  echo -e " ${z}╰${line}╯${NC}"
}

echo -e " "

# ---- Welcome banner ----
print_center_box "EissamiXR — Tunneling Management Dashboard"
echo -e " ${z}══════════════════════════════════════════════════════════${NC}"
echo -e " ${z}$NC$r ⇲ $NC$y Operating System ${NC}     $Blue=$NC $MODEL${NC}"
echo -e " ${z}$NC$r ⇲ $NC$y ISP ${NC}                  $Blue=$NC $ISP${NC}"
echo -e " ${z}$NC$r ⇲ $NC$y IP Address ${NC}           $Blue=$NC $IPVPS${NC}"
echo -e " ${z}$NC$r ⇲ $NC$y City ${NC}                 $Blue=$NC $CITY${NC}"
echo -e " ${z}$NC$r ⇲ $NC$y Server RAM ${NC}           $Blue=$NC $tram MB $NC"
echo -e " ${z}$NC$r ⇲ $NC$y CPU Cores ${NC}            $Blue=$NC $CORE${NC} CPU"
echo -e " ${z}$NC$r ⇲ $NC$y Server Uptime ${NC}        $Blue=$NC $SERONLINE${NC}"
echo -e " ${z}$NC$r ⇲ $NC$y Current Date ${NC}         $Blue=$NC $DATEVPS${NC}"
echo -e " ${z}$NC$r ⇲ $NC$y Current Time ${NC}         $Blue=$NC $TIMEZONE${NC}"
echo -e " ${z}$NC$r ⇲ $NC$y Domain ${NC}               $Blue=$NC $domain${NC}"
echo -e " ${z}══════════════════════════════════════════════════════════${NC}"
echo -e "          ${NC}┌─────────────────────────────────────┐${NC}"
echo -e "                 ${CYAN}SSH/OVPN/UDP Accounts${NC}     $y=$NC $ssh1${NC}"
echo -e "                 ${CYAN}VMESS/WS/GRPC Accounts${NC}    $y=$NC $vma${NC}"
echo -e "                 ${CYAN}VLESS/WS/GRPC Accounts${NC}    $y=$NC $vla${NC}" 
echo -e "                 ${CYAN}TROJAN/WS/GRPC Accounts${NC}   $y=$NC $trb${NC}"
echo -e "                 ${CYAN}SHADOW/WS/GRPC Accounts${NC}   $y=$NC $ssa${NC}"
echo -e "          ${NC}└─────────────────────────────────────┘${NC}"
echo -e " ${z}╭════════════════╮╭══════════════════╮╭════════════════════╮${NC}"
echo -e " ${z}│ ${NC}$y SSH$NC : $status_ssh" "       $y NGINX$NC : $status_nginx" "       $y XRAY$NC : $status_xray     $NC${z}│$NC" 
echo -e " ${z}│ ${NC}$y WS-ePRO$NC : $status_ws_epro" "   $y DROPBEAR$NC : $status_dropbear" "    $y HAPROXY$NC : $status_haproxy  $NC${z}│$NC" 
echo -e " ${z}╰════════════════╯╰══════════════════╯╰════════════════════╯${NC}"
echo -e "    ${z}══════════════════════════════════════════════════════${NC}"
echo -e "           ${z}$NC [${r}01${NC}]$green SSH MENU$NC      ${z}│$NC [${r}05${NC}]$green SSWS MENU$NC     ${z}$NC"
echo -e "           ${z}$NC [${r}02${NC}]$green VMESS MENU$NC    ${z}│$NC [${r}06${NC}]$green NOOBZVPN MENU$NC ${z}$NC"
echo -e "           ${z}$NC [${r}03${NC}]$green VLESS MENU$NC    ${z}│$NC [${r}07${NC}]$green SPEEDTEST$NC     ${z} $NC"
echo -e "           ${z}$NC [${r}04${NC}]$green TROJAN MENU$NC   ${z}│$NC [${r}08${NC}]$green MORE SETTINGS$NC  ${z} $NC"
echo -e "    ${z}══════════════════════════════════════════════════════${NC}"
echo -e " ${z}╭══════════════════════════════════════════════════════════╮${NC}"
echo -e " ${z}│$NC${z} Developer$NC   ${z}=$NC SCRIPT BY EissamiXR"
echo -e " ${z}│$NC${z} Telegram$NC    ${z}=$NC @EissamiXR"
echo -e " ${z}│$NC${z} User$NC        ${z}=$NC Administrator"
echo -e " ${z}╰══════════════════════════════════════════════════════════╯${NC}"
echo -e ""
read -p " PLEASE SELECT A MENU OPTION (1-8): " opt
echo -e ""
case $opt in
1 | 01)
clear
m-sshws
;;
2 | 02)
clear
m-vmess
;;
3 | 03)
clear
m-vless
;;
4 | 04)
clear
m-trojan
;;
5 | 05)
clear
m-ssws
;;
6 | 06)
clear
m-noob
;;
7 | 07)
clear
speedtest
;;
7 | 07)
clear
speedtest
menu
;;
8 | 08)
clear
menu-x
;;
0 | 00)
exit
;;
x)
menu
;;
*) clear ;
echo -e 
menu
;;
esac
